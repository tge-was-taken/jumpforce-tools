
Code:

[ENABLE]

{$lua}

-- see if the file exists
local function file_exists(file)
  local f = io.open(file, "rb")
  if f then f:close() end
  return f ~= nil
end

-- get all lines from a file, returns an empty
-- list/table if the file does not exist
local function lines_from(file)
  if not file_exists(file) then return {} end
  lines = {}
  for line in io.lines(file) do
    lines[#lines + 1] = line
  end
  return lines
end

-- this pattern captures the name, location, and size from each line.
-- Example line: AIManager::AIManager(void)\t.text\t0000000000401D60\t00000E6A\t(bunch of other junk)
-- psuedo pattern: (everything_not_tab) + "\teverything_not_tab\t" + (hex_number) + "\t" + (hex_number)
local pattern = "([^\t]+)" .. "\t[^\t]+\t" .. "(%x+)" .. "\t" .. "(%x+)"

-- Get table containing lines of text from "IDA_functions.txt"
local file = "D:\\re\\jumpforce\\IDA_functions.txt"
local lines = lines_from(file)

sl = createSymbolList()

-- Iterate through the lines in the map file
for k,v in pairs(lines) do

  -- Capture the section, offset, and symbol name
  local name, location, size = string.match(v, pattern)

  local location = tonumber("0x" .. location)
  local size = tonumber("0x" .. size)

  sl.addSymbol(process, name, location, size)

end

sl.register()

{$asm}

[DISABLE]

{$lua}

sl.unregister()
sl = nil

{$asm}
